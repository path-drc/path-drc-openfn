services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - OPENFN_POSTGRESQL_DB=${OPENFN_POSTGRESQL_DB}
      - OPENFN_POSTGRESQL_USERNAME=${OPENFN_POSTGRESQL_USERNAME}
      - OPENFN_POSTGRESQL_PASSWORD=${OPENFN_POSTGRESQL_PASSWORD}
    volumes:
      # If PGDATA_PATH is set, use it as a bind mount. Otherwise, use the named volume 'pgdata'.
      - ${PGDATA_PATH:-pgdata}:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
  openfn:
    image: ${OPENFN_IMAGE}
    # This command runs a shell script that performs the following actions:
    # 1. Executes the Lightning.Release.migrate() function to handle database migrations.
    # 2. Sets up a user with the provided first name, last name, email, password, and role using the Lightning.Setup.setup_user function.
    #    - The user details are hardcoded with the first name "Test", last name "User", email "root@openhim.org", and password "instant101".
    #    - The role assigned to the user is "superuser".
    #    - The function also takes an API key from the environment variable ${OPENFN_API_KEY}.
    #    - Additionally, it sets up a schema with the name "openhim ndr" and type "http", including credentials and a base URL from environment variables.
    # 3. Starts the Lightning application using the /app/bin/lightning start command.
    command: >
      sh -c "/app/bin/lightning eval 'Lightning.Release.migrate()' && /app/bin/lightning start"
    environment:
      - DATABASE_URL=${OPENFN_DATABASE_URL}
      - DISABLE_DB_SSL=${OPENFN_DISABLE_DB_SSL}
      - IS_RESETTABLE_DEMO=${OPENFN_IS_RESETTABLE_DEMO}
      - LISTEN_ADDRESS=${OPENFN_LISTEN_ADDRESS}
      - LOG_LEVEL=${OPENFN_LOG_LEVEL}
      - ORIGINS=${OPENFN_ORIGINS}
      - PRIMARY_ENCRYPTION_KEY=${OPENFN_PRIMARY_ENCRYPTION_KEY}
      - SECRET_KEY_BASE=${OPENFN_SECRET_KEY_BASE}
      - WORKER_RUNS_PRIVATE_KEY=${OPENFN_WORKER_RUNS_PRIVATE_KEY}
      - WORKER_SECRET=${OPENFN_WORKER_SECRET}
      - KAFKA_TRIGGERS_ENABLED=${OPENFN_KAFKA_TRIGGERS_ENABLED}
      - CORS_ORIGINS=${OPENFN_CORS_ORIGINS}
      - 'MIX_ENV=${MIX_ENV:-dev}'
      - 'NODE_ENV=${NODE_ENV:-development}'
    healthcheck:
      test: '${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:4000/health_check}'
      interval: '10s'
      timeout: '3s'
      start_period: '5s'
      retries: 3
    depends_on:
      - postgres
    ports:
      - "4000:4000"
  worker:
    image: ${OPENFN_WORKER_IMAGE}
    environment:
      - WORKER_LIGHTNING_PUBLIC_KEY=${OPENFN_WORKER_LIGHTNING_PUBLIC_KEY}
      - WORKER_SECRET=${OPENFN_WORKER_SECRET}
      - NODE_ENV=production
    command: [ 'pnpm', 'start:prod', '-l', 'ws://openfn:${URL_PORT-4000}/worker' ]
  # openfn-user-setup:
  #   image: ${OPENFN_IMAGE}
  #   # This command runs a shell script that performs the following actions:
  #   # 1. Executes the Lightning.Release.migrate() function to handle database migrations.
  #   # 2. Sets up a user with the provided first name, last name, email, password, and role using the Lightning.Setup.setup_user function.
  #   #    - The user details are hardcoded with the first name "Test", last name "User", email "root@openhim.org", and password "instant101".
  #   #    - The role assigned to the user is "superuser".
  #   #    - The function also takes an API key from the environment variable ${OPENFN_API_KEY}.
  #   #    - Additionally, it sets up a schema with the name "openhim ndr" and type "http", including credentials and a base URL from environment variables.
  #   # 3. Starts the Lightning application using the /app/bin/lightning start command.
  #   command: >
  #     sh -c "/app/bin/lightning eval 'Lightning.Release.migrate()' && /app/bin/lightning eval 'Lightning.Setup.setup_user(%{first_name: \"Test\",last_name: \"User\",email: \"root@openhim.org\",password: \"instant101\", role: :superuser}, \"${OPENFN_API_KEY}\" ,[%{name: \"openhim ndr\", schema: \"http\", body: %{username: \"${FHIR_SERVER_USERNAME}\", password: \"${FHIR_SERVER_PASSWORD}\", baseUrl: \"${FHIR_SERVER_BASE_URL}\"}}])' && /app/bin/lightning start"
  #   environment:
  #     - DATABASE_URL=${OPENFN_DATABASE_URL}
  #     - DISABLE_DB_SSL=${OPENFN_DISABLE_DB_SSL}
  #     - IS_RESETTABLE_DEMO=${OPENFN_IS_RESETTABLE_DEMO}
  #     - LISTEN_ADDRESS=${OPENFN_LISTEN_ADDRESS}
  #     - LOG_LEVEL=${OPENFN_LOG_LEVEL}
  #     - ORIGINS=${OPENFN_ORIGINS}
  #     - PRIMARY_ENCRYPTION_KEY=${OPENFN_PRIMARY_ENCRYPTION_KEY}
  #     - SECRET_KEY_BASE=${OPENFN_SECRET_KEY_BASE}
  #     - WORKER_RUNS_PRIVATE_KEY=${OPENFN_WORKER_RUNS_PRIVATE_KEY}
  #     - WORKER_SECRET=${OPENFN_WORKER_SECRET}
  #     - KAFKA_TRIGGERS_ENABLED=${OPENFN_KAFKA_TRIGGERS_ENABLED}
  #   healthcheck:
  #     test: '${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:4000/health_check}'
  #     interval: '10s'
  #     timeout: '3s'
  #     start_period: '5s'
  #     retries: 3
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "4000:4000"

volumes:
  pgdata: